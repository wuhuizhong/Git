-- Generated by Oracle SQL Developer REST Data Services 17.2.0.188.1159
-- Exported REST Definitions from ORDS Schema Version 18.1.1.95.1251
-- Schema: PATSTATUS   Date: Thu Aug 30 14:30:17 CST 2018
--
BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'PATSTATUS',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'patstatus',
      p_auto_rest_auth      => FALSE);    

  ORDS.DEFINE_MODULE(
      p_module_name    => 'patstatus',
      p_base_path      => '/pat/',
      p_items_per_page =>  500,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'patstatus',
      p_pattern        => 'getenvrlist',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'patstatus',
      p_pattern        => 'getenvrlist',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  500,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'declare
l_cursor Sys_Refcursor;
begin

  Pkg_Status_Query.Get_Envr_List(Output_Out => l_cursor);

end;'
      );
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'patstatus',
      p_pattern        => 'getpatstatus',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'patstatus',
      p_pattern        => 'getpatstatus',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  500,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'declare
l_cursor Sys_Refcursor;
v_out_json clob;
begin

  Pkg_Status_Query.Get_Pat_Status(Pati_Id_In => :Pati_Id_In,
                                                Output_Out => l_cursor);
end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'patstatus',
      p_pattern            => 'getpatstatus',
      p_method             => 'GET',
      p_name               => 'pati_id_in',
      p_bind_variable_name => 'pati_id_in',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'patstatus',
      p_pattern        => 'getstatuslist',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'patstatus',
      p_pattern        => 'getstatuslist',
      p_method         => 'GET',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  500,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'declare
l_cursor Sys_Refcursor;
begin



  Pkg_Status_Query.Get_Status_List(Type_In => :type_id,
                                                Output_Out => l_cursor);

end;'
      );
  ORDS.DEFINE_PARAMETER(
      p_module_name        => 'patstatus',
      p_pattern            => 'getstatuslist',
      p_method             => 'GET',
      p_name               => 'type_id',
      p_bind_variable_name => 'type_id',
      p_source_type        => 'URI',
      p_param_type         => 'STRING',
      p_access_method      => 'IN',
      p_comments           => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'patstatus',
      p_pattern        => 'saverecord',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'patstatus',
      p_pattern        => 'saverecord',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
'declare
l_blob blob;
c_clob clob;
begin
    l_blob := :body;
    c_clob := wwv_flow_utilities.blob_to_clob(l_blob);
    Pkg_Status_Record.Save_Status_Record_Forquery(c_clob);
end;'
      );


  COMMIT; 
END;